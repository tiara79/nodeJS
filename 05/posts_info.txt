// 설치
// npm init -y 
// npm i express nodemon better-sqlite3 moment

// 실행
// npx nodemon api.js    

 const express = require('express');  //express 모듈 임포트
 const moment = require("moment"); // 날짜 모듈 임포트
 const Database = require("better-sqlite3"); // 데이터베이스 모듈 임포트
 const path = require("path"); // 경로 모듈 임포트

 // DB setting
 const db_name = path.join (__dirname,"posts.db"); // sqlite 용 데이터 베이스 사용
 const db = new Database(db_name); // better-sqlite3 의 데이터 배이스 생성( 데이터 베이스 파일)

//  express 설정
const app = express(); // app 이란 변수에 express 함수를 담고 app 변수 이용 하여 express 기능 사용
const PORT= 3000; // 포트 사용
app.use(express.json()); // 미듈 웨어를 설정 (모든 http 요청과 응답에 json 포맷으로 처리)

// ############################################## <- 기본 설정 , body 설명 -> ##################################

// 1. post.db 게시판 전용 테이블을 생성
const create_sql = `
   create table if not exists posts(  // table 생성
   id integer primary key autoincrement,  //index
   title varchar(255), // 게시글 제목
   content text,  // 게시글 내용
   author varchar(100), // 작성자
   createdAt datetime default current_timestamp, // 작성시간
   count integer default 0  //조회수 
   ) `;
db.exec(create_sql);  //sql 쿼리를 실행 

// 게시글 쓰기 , http://localhost:3000/posts/의 POST 2번째 인자의 핸들러 함수 실행
app.post("/posts",(req,res)=>{
  const {title, content, author } = req.body;  // 요청 본문에서 title, content, author를 꺼내 body에서 json 포맷 형식으로 처리
  let sql = `INSERT INTO posts(title, content, author) VALUES (?, ?, ?);`  

  db.prepare(sql).run(title,content,author);
  // -------------------------------------------
  // const stmt = db.prepare(sql); // 문자열 sql 실제 쿼리문으로 파싱. statment 객체로 만듬
  // stmt.run(title,content,author); 
  // stmt.run : UPDATE, INSERT, DELETE
  // stmt.all : select * from table or select * from table where -> [] 배열로 값을 반환
  // stml.get : select * from table limit 1 -> {} 객체로 값을 반환(보통 1개에 대해서만 처리할 때)
  // -------------------------------------------
  res.status(201).json({message:"ok"});
})

// 게시판 전체 정보 조회
app.get("/posts",(req,res)=>{
  let sql= `select id, title, content, author, createdAt from posts order by createdAt desc`
  // 쿼리를 준비
  const stmt = db.prepare(sql);
  // 쿼리를 날림
  const rows = stmt.all();
  console.log(rows);
  res.status(200).json({data: rows});
})

// 게시글 상세 조회 : 아이디 한개만 가져옴 http://localhost:3000/posts/3
app.get("/posts/:id", (req,res)=>{
  const id = req.params.id;
  let sql = `select id, title,content,author, createdAt, count from posts where id = ?`;
  const stmt = db.prepare(sql);  //select 쿼리문이 준비 완료
  const post = stmt.get(id);  // {} 로 반환
  res.status(200).json({data:post}); // json 문자열로 리턴 됨
})

//게시글 수정 http://localhost:3000/posts/3
app.put("/posts/:id",(req,res)=>{  // 수정할 id,content
  const id = req.params.id; // 수정할 게시글 params에서 가져옴
  const {title, content} = req.body; 
  let sql = `update posts set title =?,content=? where id=?`
  const stmt = db.prepare(sql); // stmt 쿼리문 준비
  stmt.run(title, content, id) // 실제 쿼리로 데이터베이스 실행(run) // 주의 : ?의 갯수와 순서는 일치해야 함
  //res.redirect("/posts");  // run 후에는 전체 목록 가져오기
res.json({message:"ok"})   
})

app.delete("/posts/:id" ,(req,res) => {
  const id = req.params.id; // 삭제할 게시글 아이디 가져옴
  let sql =`delete from posts where id = ?` // 삭제 쿼리문 생성
  const stmt = db.prepare(sql); // 쿼리문 준비
  stmt.run(id); // 쿼리문 실행
  res.json({message:"ok"});  // 결과로 응답
})  

//server start 서버 시작
app.listen(PORT,()=>{ });